'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDayPicker = require('react-day-picker');

var _reactDayPicker2 = _interopRequireDefault(_reactDayPicker);

function defaultFormat(value) {
  return value ? value.toISOString().substring(0, 10) : '';
}

function create() {
  var overrides = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  function bootstrap(locals) {
    return bootstrap.renderContainer(locals);
  }

  bootstrap.getFormat = overrides.getFormat || function getFormat(locals) {
    return locals.format || defaultFormat;
  };

  bootstrap.renderContainer = overrides.renderContainer || function renderContainer(locals) {
    return _react2['default'].createElement(
      'div',
      { style: { maxWidth: '300px' } },
      bootstrap.renderDate(locals),
      locals.isOpen && bootstrap.renderDayPicker(locals)
    );
  };

  bootstrap.renderResetButtonLabel = overrides.renderResetButtonLabel || function renderResetButtonLabel() {
    return _react2['default'].createElement(
      'span',
      null,
      'âœ˜'
    );
  };

  bootstrap.renderResetButton = overrides.renderResetButton || function renderResetButton(locals) {
    return _react2['default'].createElement(
      'div',
      { className: 'input-group-addon', style: { cursor: 'pointer' }, onClick: locals.onReset },
      bootstrap.renderResetButtonLabel(locals)
    );
  };

  bootstrap.renderDate = overrides.renderDate || function renderStatic(locals) {
    return locals.disabled ? bootstrap.renderDisabledDate(locals) : bootstrap.renderEnabledDate(locals);
  };

  bootstrap.renderEnabledDate = overrides.renderEnabledDate || function renderEnabledDate(locals) {
    var format = bootstrap.getFormat(locals);
    return _react2['default'].createElement(
      'div',
      { className: 'input-group' },
      _react2['default'].createElement('input', {
        className: 'form-control',
        onClick: function () {
          return locals.toggle();
        },
        onChange: function () {},
        value: format(locals.value)
      }),
      bootstrap.renderResetButton(locals)
    );
  };

  bootstrap.renderDisabledDate = overrides.renderDisabledDate || function renderDisabledDate(locals) {
    var format = bootstrap.getFormat(locals);
    return _react2['default'].createElement('input', {
      className: 'form-control',
      disabled: true,
      onChange: function () {},
      value: format(locals.value)
    });
  };

  bootstrap.renderDayPicker = overrides.renderDayPicker || function renderDayPicker(locals) {
    var value = locals.value;
    var props = {
      initialMonth: value || undefined, // DayPicker wants undefined, not null
      modifiers: { selected: function selected(date) {
          return _reactDayPicker.DateUtils.isSameDay(value, date);
        } },
      onDayClick: locals.onSelect,
      value: value,
      localeUtils: locals.localeUtils,
      locale: locals.locale,
      renderDay: locals.renderDay
    };
    return _react2['default'].createElement(_reactDayPicker2['default'], props);
  };

  bootstrap.clone = function clone() {
    var newOverrides = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    return create(_extends({}, overrides, newOverrides));
  };

  return bootstrap;
}

exports['default'] = create();
module.exports = exports['default'];